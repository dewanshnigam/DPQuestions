
// https://codeforces.com/contest/455/my


import java.util.*;
import java.io.*;
import static java.lang.Math.*;
public class C
{
    static InputReader in=new InputReader(System.in);
    static OutputWriter out=new OutputWriter(System.out);
    static StringBuilder sb=new StringBuilder();
    static BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
    static long MOD = (long)(1e9+7);

    // Main Class Starts Here

    static long dp[];

    public static long f(int a, int max, int ar[]){
        if(a > max) return 0L;
        if(dp[a] != -1L) return dp[a];
        dp[a] = max(f(a+1, max, ar) , f(a+2, max, ar) + (1L * ar[a] * a));
        return dp[a];
    }

    public static void main(String args[])throws IOException
    {
        // Write your code.
        int t = 1;
        while(t-- > 0){
            int n = in();
            int a[] = an(n);
            int max = 0;
            int min = Integer.MAX_VALUE;
            for(int i=0;i<n;i++){
                max = max(max,a[i]);
                min = min(min,a[i]);
            }

            int b[] = new int[max+1];
            for(int i=0;i<n;i++){
                b[a[i]]++;
            }

            dp = new long[max+1];

            Arrays.fill(dp, -1L);

            app(f(min, max, b)+"\n");
        }
        out.printLine(sb);
        out.close();
    }

    public static int lis(int a[]) {
        int n=a.length;
        if(n==0 || n==1)
            return n;
        int dp[] = new int[n];
        for(int i=0;i<n;i++) {
            dp[i] = 1;
            for(int j=0;j<i;j++) {
                if(a[j] < a[i]) {
                    dp[i] = Math.max(dp[i], (dp[j]+1));
                }
            }
        }
        Arrays.sort(dp);
        return dp[n-1];
    }

    public static long rev(long n) {
        if(n<10L)
            return n;
        long rev = 0L;
        while(n != 0L) {
            long a = n % 10L;
            rev = a + rev*10L;
            n /= 10L;
        }
        return rev;
    }

    public static long pow(long a,long b) {
        if(b==0)
            return 1L;
        if(b==1)
            return a % MOD;
        long f = a * a;
        if(f > MOD)
            f %= MOD;
        long val = pow(f, b/2) % MOD;
        if(b % 2 == 0)
            return val;
        else {
            long temp = val * (a % MOD);
            if(temp > MOD)
                temp = temp % MOD;
            return temp;
        }
    }

    public static long lcm(long a,long b) {
        long lcm = (a*b)/gcd(a,b);
        return lcm;
    }

    public static long gcd(long a,long b) {
        if(b==0)
            return a;
        return gcd(b, a%b);
    }

    public static int[] an(int n) {
        int ar[]=new int[n];
        for(int i=0;i<n;i++)
            ar[i]=in();
        return ar;
    }

    public static long[] lan(int n) {
        long ar[]=new long[n];
        for(int i=0;i<n;i++)
            ar[i]=lin();
        return ar;
    }

    public static String atos(Object ar[]) {
        return Arrays.toString(ar);
    }

    public static int in() {
        return in.readInt();
    }

    public static long lin() {
        return in.readLong();
    }

    public static String sn() {
        return in.readString();
    }

    public static void prln(Object o) {
        out.printLine(o);
    }

    public static void prn(Object o) {
        out.print(o);
    }

    public static int getMax(int a[]) {
        int n = a.length;
        int max = a[0];
        for(int i=1; i < n; i++) {
            max = Math.max(max, a[i]);
        }
        return max;
    }

    public static int getMin(int a[]) {
        int n = a.length;
        int min = a[0];
        for(int i=1; i < n; i++) {
            min = Math.min(min, a[i]);
        }
        return min;
    }

    public static void display(int a[]) {
        out.printLine(Arrays.toString(a));
    }

    public static HashMap<Integer,Integer> hm(int a[]){
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0; i < a.length;i++) {
            int keep = (int)map.getOrDefault(a[i],0);
            map.put(a[i],++keep);
        }
        return map;
    }

    public static void app(Object o) {
        sb.append(o);
    }

    public static long calcManhattanDist(int x1,int y1,int x2,int y2) {
        long xa = Math.abs(x1-x2);
        long ya = Math.abs(y1-y2);
        return (xa+ya);
    }


    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public int readInt() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public long readLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public String next() {
            return readString();
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }

    static class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object...objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void printLine(Object...objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }
    }
}
