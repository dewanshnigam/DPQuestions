/*
 We will solving it using DP. Brute Force will give O(2^N * N) Solution.
 With DP we will do it in O(N*N).
 
 The solution is :  
 if for n-1 length of bit string and k adj 1s is 'X',
 then if the strings that end with 0, you append 1 , 'X' doesn't change.
 if the string that ends with 1, and you append 1, 'X' increases by one.
 
 We have a 3 dimensional DP. such that DP[i][j][l] (l = {0,1}) means
 for bit string of length i, having j adj 1s and ends with 0 or 1.
 
 our answer ->  DP[n][k][0] + DP[n][k][1].
*/

import java.util.*;
import java.io.*;
import static java.lang.Math.*;
public class DP_SPOJ_GNYRO9F
{
	// DP_ GNYR09F_ adjacent bits.
	static InputReader in=new InputReader(System.in);
	static OutputWriter out=new OutputWriter(System.out);    
	static StringBuilder sb=new StringBuilder();
	static long MOD = (long)(998244353);    
	// Main Class Starts Here  
	
	public static int dp[][][];
	
	public static void calc(int n, int k) {
		dp[1][0][0] = 1; dp[1][0][1] = 1;
		for(int len = 2;len <= n;len++) {
			for(int adj = 0; adj <= k && adj < len; adj++) {
				dp[len][adj][0] = dp[len-1][adj][0] + dp[len-1][adj][1];
				dp[len][adj][1] = dp[len-1][adj][0];
				dp[len][adj][1] += (adj-1) < 0 ? 0 : dp[len-1][adj-1][1];				
			}
		}	
	}
	
	public static void main(String args[])throws IOException
	{
		// Write your code.
		
		int t=in();    
		while(t-->0) {
			int no = in();
			int n = in();
			int k = in();
			dp = new int[n+1][k+1][2];
			calc(n,k);
			int sum = dp[n][k][0] + dp[n][k][1];
			app(no+" "+sum+"\n");
		}    	
		out.printLine(sb);
		out.close();

	}
	
	public static boolean checkPossible(String s, String t) {
		char a[] = s.toCharArray();
		char b[] = t.toCharArray();
		Arrays.sort(a);
		Arrays.sort(b);
		return (Arrays.toString(a)).equals(Arrays.toString(b));
	}
	
	public static boolean isPrime(int x) {
		for(int i=3; (i*i) <= x; i++) {
			if(x % i == 0) return false;
		}
		return true;
	}
	
	
	static class Bipair{
		int val;
		int bit;
		public Bipair(int val,int bit) {
			this.val = val;
			this.bit = bit;
		}
	}
	
	static class CircLL{
		// circular linked list.
		Node head;
		Node last;
		public CircLL(long num) {
			head = new Node(num); 
			// pointing to itself.
			last = head;
			last.next = head;
		}    	

		public void add(long num) {
			Node fresh = new Node(num);
			last.next = fresh;
			last = last.next;
			last.next  = head;
		}

		public void print() {
			Node temp = head;    		
			while(temp.next!=head) {    			
				temp = temp.next;
			}    		
			prln("\n");
		}
	}

	static class Node{
		long data;
		Node next;    	
		public Node(long data) {
			this.data=data;
			this.next=null;
		}
	}

	public static int lis(int a[]) {
		int n=a.length;    	
		if(n==0 || n==1)
			return n;
		int dp[] = new int[n];
		for(int i=0;i<n;i++) {
			dp[i] = 1;
			for(int j=0;j<i;j++) {
				if(a[j] < a[i]) {
					dp[i] = Math.max(dp[i], (dp[j]+1));
				}
			}
		}
		Arrays.sort(dp);
		return dp[n-1];
	}

	public static long rev(long n) {
		if(n<10L)
			return n;
		long rev = 0L;
		while(n != 0L) {
			long a = n % 10L;
			rev = a + rev*10L;
			n /= 10L;
		}
		return rev;
	}

	public static long pow(long a,long b) {
		if(b==0)
			return 1L;
		if(b==1)
			return a % MOD;
		long f = a * a;
		if(f > MOD)
			f %= MOD;
		long val = pow(f, b/2) % MOD;
		if(b % 2 == 0)
			return val;
		else {
			long temp = val * (a % MOD);
			if(temp > MOD)
				temp = temp % MOD;
			return temp;
		}
	}

	public static long lcm(long a,long b) {
		long lcm = (a*b)/gcd(a,b);
		return lcm;
	}

	public static long gcd(long a,long b) {
		if(b==0)
			return a;
		return gcd(b, a%b);
	}

	public static int[] an(int n) {
		int ar[]=new int[n];
		for(int i=0;i<n;i++)
			ar[i]=in();
		return ar;
	}

	public static long[] lan(int n) {
		long ar[]=new long[n];
		for(int i=0;i<n;i++)
			ar[i]=lin();
		return ar;
	}    

	public static String atos(Object ar[]) {
		return Arrays.toString(ar);
	}

	public static int in() {
		return in.readInt();
	}

	public static long lin() {
		return in.readLong();
	}    

	public static String sn() {
		return in.readString();
	}

	public static void prln(Object o) {    	
		out.printLine(o);
	}

	public static void prn(Object o) {    	
		out.print(o);
	}

	public static int getMax(int a[]) {
		int n = a.length;
		int max = a[0];
		for(int i=1; i < n; i++) {
			max = Math.max(max, a[i]);
		}
		return max;
	}

	public static int getMin(int a[]) {
		int n = a.length;
		int min = a[0];
		for(int i=1; i < n; i++) {
			min = Math.min(min, a[i]);
		}
		return min;
	}

	public static void display(int a[]) {
		out.printLine(Arrays.toString(a));
	}    

	public static HashMap<Integer,Integer> hm(int a[]){
		HashMap<Integer,Integer> map=new HashMap<>();
		for(int i=0; i < a.length;i++) {
			int keep = (int)map.getOrDefault(a[i],0);
			map.put(a[i],++keep);
		}
		return map;
	}

	public static void app(Object o) {
		sb.append(o);
	}

	public static long calcManhattanDist(int x1,int y1,int x2,int y2) {
		long xa = Math.abs(x1-x2);
		long ya = Math.abs(y1-y2);
		return (xa+ya);
	}


	static class InputReader {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int read() {
			if (numChars == -1)
				throw new InputMismatchException();
			if (curChar >= numChars) {
				curChar = 0;
				try {
					numChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (numChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int readInt() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long readLong() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public String next() {
			return readString();
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}

	static class OutputWriter {
		private final PrintWriter writer;

		public OutputWriter(OutputStream outputStream) {
			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
		}

		public OutputWriter(Writer writer) {
			this.writer = new PrintWriter(writer);
		}

		public void print(Object...objects) {
			for (int i = 0; i < objects.length; i++) {
				if (i != 0)
					writer.print(' ');
				writer.print(objects[i]);
			}
		}

		public void printLine(Object...objects) {
			print(objects);
			writer.println();
		}

		public void close() {
			writer.close();
		}
	} 
}
